// Configuration has its own dependencies
def deps = dependencies
configurations.all { configuration ->
	if (rootProject.ext.has("dependencyManagementProperties")) {
		resolutionStrategy.dependencySubstitution.all { dependency ->
			try {
				def requested = dependency.requested
				if (requested.hasProperty("version") && !requested.version) {
					if (dependency.requested.group.equals("com.infernalbeast") || dependency.requested.group.startsWith("com.infernalbeast.")) {
						logger.lifecycle "DEPENDENCY REQUESTED "+dependency.requested+" for "+project.name
					} else {
						def name = dependency.requested.group+":"+dependency.requested.module
						def value = rootProject.ext["dependencyManagementProperties"][name]
						if (value != null) {
							logger.lifecycle "USE TARGET: "+dependency.requested+" -> "+name+":"+value
							dependency.useTarget name+":"+value
						}
					}
				}
			} catch (Throwable t) {
				t.printStackTrace()
				System.exit(0)
			}
		}
	}
	// https://github.com/gradle/gradle/blob/master/subprojects/dependency-management/src/main/java/org/gradle/api/internal/artifacts/configurations/DefaultConfiguration.java
	if (configuration.isCanBeDeclared()) {
		if (project.ext.has("bomDependencyManagementProperties")) {
			project.ext["bomDependencyManagementProperties"].each{ key, value ->
				deps.add(configuration.name, deps.platform(key+":"+value))
			}
		}
	}
}
