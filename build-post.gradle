if (project.hasProperty("compileJava") && project.hasProperty("compileTestJava")) {
	[compileJava, compileTestJava]*.options.collect {options ->
		options.compilerArgs.add '-parameters'
	}
}

if (project.hasProperty("resourcesComment")) {
	resourcesComment {
		if (project.hasProperty('sourceSets')) {
			sourceSets.forEach { sourceSet ->
				def compileJava = tasks.findByName(sourceSet.compileJavaTaskName)
				def dstDir = new File(new File(buildDir, "resources-comment"), sourceSet.name)
				def task = create sourceSet, dstDir
				sourceSet.output.dir(dstDir, buildBy: task.name)
				compileJava.finalizedBy task
			}
		}
	}
}

if (project.hasProperty("artifactoryClassloader")) {
	apply from: rootProject.ext["gradle-resources"] + "thin-client-ledger.gradle", to: {
		setSourceSet sourceSets.main
		setConfiguration configurations.runtimeClasspath
		setRetry 5
	}
	apply from: rootProject.ext["gradle-resources"] + "thin-client.gradle", to: {
		setJarTask jar
		setLazy true
	}
}

if (project.hasProperty("resourcesRegex")) {
	resourcesRegex {
		if (project.hasProperty('sourceSets')) {
			sourceSets.forEach { sourceSet ->
				def compileJava = tasks.findByName(sourceSet.compileJavaTaskName)
				def dstDir = new File(new File(buildDir, "resources-regex"), sourceSet.name)
				def task = create sourceSet, dstDir
				sourceSet.output.dir(dstDir, buildBy: task.name)
				compileJava.finalizedBy task
			}
		}
	}
}

if (project.hasProperty("classesDynamic")) {
	classesDynamic {
		if (project.hasProperty('sourceSets')) {
			sourceSets.forEach { sourceSet ->
				def compileJava = tasks.findByName(sourceSet.compileJavaTaskName)
				def dstDir = new File(new File(buildDir, "classes-dynamic"), sourceSet.name)
				def task = create sourceSet, dstDir
				sourceSet.output.dir(dstDir, buildBy: task.name)
				compileJava.finalizedBy task
			}
		}
	}
}

if (System.env.ECLIPSE) {
	dependencies {
		if (project.hasProperty("sourceSets")) {
			if (sourceSets.hasProperty("main")) {
				apply from: rootProject.ext["gradle-resources"] + "source-as-resources.gradle", to: {
					setSourceSet sourceSets.main
					setConfiguration configurations.implementation
				}
			}
			if (sourceSets.hasProperty("text")) {
				apply from: rootProject.ext["gradle-resources"] + "source-as-resources.gradle", to: {
					setSourceSet sourceSets.test
					setConfiguration configurations.testImplementation
				}
			}
		}
	}
}

task synchronization {
	doFirst {
		logger.lifecycle "SYNCHRONIZATION: "+project.name
	}
	if (tasks.findByName('eclipseJdt')) {
		dependsOn(eclipseJdt)
	}
	if (project.parent != null) {
		project.parent.tasks."synchronization".dependsOn(synchronization)
	}
}

task compositeSynchronization {
	gradle.includedBuilds.each { includedBuild ->
		def gradleProperties = new Properties()
		new java.io.File(includedBuild.projectDir, "gradle.properties").withInputStream { gradleProperties.load(it) }
		if (gradleProperties.containsKey("com.infernalbeast:bom")) {
			dependsOn includedBuild.task(":synchronization")
		}
	}
	dependsOn synchronization
}

apply from: rootProject.ext["gradle-resources"] + "eclipse.gradle"

apply from: rootProject.ext["gradle-resources"] + "substitute.gradle"
